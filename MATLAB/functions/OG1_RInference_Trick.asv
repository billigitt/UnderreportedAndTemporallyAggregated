function [Rmat, dailyICell] = OG1_RInference_Trick(I, w, priorShapeScale, P, M)

%pre-allocate 'daily' incidence (may not be daily but we call it that for
%ease)
Tweekly = length(I);

T = Tweekly*P;

dailyI = zeros(T, M);

shape = priorShapeScale(1);
scale = priorShapeScale(2);

I_1 = I(1);

Rmat = zeros(Tweekly, M);

vecOne2M = (1:M)';

% uniform daily incidence week 1. M samples.

dailyI(1:P, :) = mnrnd(I_1,ones(1, P)/P, M)';

dailyICell = cell(Tweekly, 1);

likelihood = ones(Tweekly, M);

%begin routine

for t = 2:Tweekly

    disp(t)

    wTmp = w;
    newDailyIncidence = [];
    numAcc = 0;
    newR = [];
    likelihoodTmp = [];

    while numAcc < M

        %sample from reconstructed incidence proportional to likelihood
        idxSample = randsample(1:M, M, true, likelihood(t-1, :));
        dailyITmp = [dailyI(1:(t-1)*P, idxSample); zeros(P, M)];

        %Sample Rt from prior
        RTmpMat = gamrnd(shape, scale, [1 M]);

        %Repeated renewal equation
        dailyITmp(((t-1)*P + 1), :) = renewalEqnInference(dailyI(1:((t-1)*P), :), ...
            wTmp, RTmpMat);

        for tt = 2:(P-1)

            dailyITmp(((t-1)*P + tt), :) = renewalEqnInference([dailyI(1:((t-1)*P), :); ...
                dailyITmp(((t-1)*P + 1):((t-1)*P + tt-1), :)], wTmp, RTmpMat);

        end

        %exclude simulations that already exceed data
        idxReject = (sum(dailyITmp(((t-1)*P + 1):((t-1)*P + tt-1), :)) > I(t));
        dailyITmp(:, idxReject) = [];
        RTmpMat(idxReject) = [];

        %calculate necessary number of cases on final 'day' to match
        finalDay = I(t) - sum(dailyITmp(((t-1)*P + 1):((t-1)*P + tt-1), :));
        dailyITmp(end, :) = finalDay;

        %calculate likelihood of the final 'day' matching the weekly data (via Poisson process) 
        gammaTmp = flipud(wTmp(1:((t-1)*P+P-1)))*[dailyI(1:((t-1)*P), :); dailyITmp(((t-1)*P+1):((t-1)*P + P-1), :)];
        gammaTmp = RTmpMat*gammaTmp; % 1 by M vector
        
        %append time t quantities
        likelihoodTmp = [likelihoodTmp exp(-gammaTmp).*gammaTmp.^finalDay./factorial(finalDay)];
        newR = [newR RTmpMat];
        newDailyIncidence = [newDailyIncidence ]

    end

    %in case of over-flow, use '1:M' instead of ':'
    newR = newR(1:M);
    likelihood = likelihoodTmp(1:M);

    %update dailyIs with accepted values
    dailyI(1:(t*P), :) = newDailyIncidence(1:(t*P), 1:M);

    dailyICell{t} = dailyI(1:(t*P), :);

    Rmat(t, :) = newR';

end



end